{"version":3,"file":"operationBuilders.js","sourceRoot":"","sources":["../../src/operationBuilders.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FieldSelection as BuilderFieldSelection, BuilderOperation, Variable } from \"tiny-graphql-query-compiler\";\nimport { Call, Var, compileWithVariableValues } from \"tiny-graphql-query-compiler\";\nimport type { FieldSelection } from \"./FieldSelection.js\";\nimport type { AnyActionFunction } from \"./index.js\";\nimport { camelize, filterTypeName, sortTypeName } from \"./support.js\";\nimport type { ActionFunctionOptions, BaseFindOptions, EnqueueBackgroundActionOptions, FindManyOptions, VariablesOptions } from \"./types.js\";\n\nconst hydrationOptions = (modelApiIdentifier: string): BuilderFieldSelection => {\n  return {\n    gadgetMeta: {\n      [`hydrations(modelName: \"${modelApiIdentifier}\")`]: true,\n    },\n  };\n};\n\n/**\n * Converts Selection nested object format to the tiny-graphql-query-compiler shape\n **/\nconst fieldSelectionToQueryCompilerFields = (selection: FieldSelection, includeTypename = false): BuilderFieldSelection => {\n  const output: BuilderFieldSelection = { ...selection };\n  if (includeTypename) output.__typename = true;\n  return output;\n};\n\nexport type FindFirstPaginationOptions = Omit<FindManyOptions, \"first\" | \"last\" | \"before\" | \"after\">;\n\nconst directivesForOptions = (options?: BaseFindOptions | null) => {\n  if (options?.live) return [\"@live\"];\n  return undefined;\n};\n\nexport const findOneOperation = (\n  operation: string,\n  id: string | undefined,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: BaseFindOptions | null\n) => {\n  const variables: Record<string, Variable> = {};\n  if (typeof id !== \"undefined\") variables.id = Var({ type: \"GadgetID!\", value: id });\n  return compileWithVariableValues({\n    type: \"query\",\n    name: operation,\n    fields: {\n      [operation]: Call(variables, fieldSelectionToQueryCompilerFields(options?.select || defaultSelection, true)),\n      ...hydrationOptions(modelApiIdentifier),\n    },\n    directives: directivesForOptions(options),\n  });\n};\n\nexport const findOneByFieldOperation = (\n  operation: string,\n  fieldName: string,\n  fieldValue: string,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: BaseFindOptions | null\n) => {\n  return findManyOperation(operation, defaultSelection, modelApiIdentifier, {\n    ...options,\n    first: 2,\n    filter: {\n      [fieldName]: {\n        equals: fieldValue,\n      },\n    },\n  });\n};\n\nexport const findManyOperation = (\n  operation: string,\n  defaultSelection: FieldSelection,\n  modelApiIdentifier: string,\n  options?: FindManyOptions\n) => {\n  return compileWithVariableValues({\n    type: \"query\",\n    name: operation,\n    fields: {\n      [operation]: Call(\n        {\n          after: Var({ value: options?.after, type: \"String\" }),\n          first: Var({ value: options?.first, type: \"Int\" }),\n          before: Var({ value: options?.before, type: \"String\" }),\n          last: Var({ value: options?.last, type: \"Int\" }),\n          sort: options?.sort ? Var({ value: options.sort, type: `[${sortTypeName(modelApiIdentifier)}!]` }) : undefined,\n          filter: options?.filter ? Var({ value: options.filter, type: `[${filterTypeName(modelApiIdentifier)}!]` }) : undefined,\n          search: options?.search ? Var({ value: options.search, type: \"String\" }) : undefined,\n        },\n        {\n          pageInfo: { hasNextPage: true, hasPreviousPage: true, startCursor: true, endCursor: true },\n          edges: {\n            cursor: true,\n            node: fieldSelectionToQueryCompilerFields(options?.select || defaultSelection, true),\n          },\n        }\n      ),\n      ...hydrationOptions(modelApiIdentifier),\n    },\n    directives: directivesForOptions(options),\n  });\n};\n\nconst ErrorsSelection: BuilderFieldSelection = {\n  message: true,\n  code: true,\n  \"... on InvalidRecordError\": {\n    validationErrors: {\n      message: true,\n      apiIdentifier: true,\n    },\n  },\n};\n\nconst variableOptionsToVariables = (variables: VariablesOptions) => {\n  return Object.fromEntries(Object.entries(variables).map(([name, options]) => [name, Var(options)]));\n};\n\nconst actionResultFieldSelection = (\n  modelSelectionField: string,\n  selection: FieldSelection,\n  isBulkAction?: boolean | null,\n  hasReturnType?: boolean | null\n) => {\n  return {\n    success: true,\n    errors: ErrorsSelection,\n    [modelSelectionField]: selection && !hasReturnType ? fieldSelectionToQueryCompilerFields(selection, true) : false,\n    [isBulkAction ? \"results\" : \"result\"]: !!hasReturnType,\n  } as FieldSelection;\n};\n\nexport const actionOperation = (\n  operation: string,\n  defaultSelection: FieldSelection | null,\n  modelApiIdentifier: string,\n  modelSelectionField: string,\n  variables: VariablesOptions,\n  options?: BaseFindOptions | null,\n  namespace?: string | null,\n  isBulkAction?: boolean | null,\n  hasReturnType?: boolean | null\n) => {\n  const selection = options?.select || defaultSelection;\n\n  let fields: BuilderFieldSelection = {\n    [operation]: Call(\n      variableOptionsToVariables(variables),\n      actionResultFieldSelection(modelSelectionField, selection, isBulkAction, hasReturnType)\n    ),\n  };\n\n  if (namespace) {\n    fields = {\n      [namespace]: fields,\n    };\n  }\n  const actionOperation: BuilderOperation = {\n    type: \"mutation\",\n    name: operation,\n    fields: {\n      ...fields,\n      ...hydrationOptions(modelApiIdentifier),\n    },\n    directives: directivesForOptions(options),\n  };\n\n  return compileWithVariableValues(actionOperation);\n};\n\nexport const actionResultOperation = <Action extends AnyActionFunction, Options extends ActionFunctionOptions<Action>>(\n  id: string,\n  action: Action,\n  options?: Options\n) => {\n  let fields: FieldSelection = {};\n\n  switch (action.type) {\n    case \"action\": {\n      const selection = options?.select || action.defaultSelection;\n\n      fields = {\n        [`... on ${camelize(action.operationName)}Result`]: actionResultFieldSelection(\n          action.modelApiIdentifier,\n          selection,\n          action.isBulk,\n          action.hasReturnType\n        ),\n      };\n      break;\n    }\n    case \"globalAction\": {\n      fields = {\n        [`... on ${camelize(action.operationName)}Result`]: globalActionFieldSelection(),\n      };\n    }\n  }\n\n  const actionResultOperation: BuilderOperation = {\n    type: \"subscription\",\n    name: action.operationName,\n    fields: {\n      backgroundAction: Call(\n        { id: Var({ value: id, type: \"String!\" }) },\n        {\n          id: true,\n          outcome: true,\n          result: {\n            ...fields,\n          },\n        }\n      ),\n    },\n  };\n\n  return compileWithVariableValues(actionResultOperation);\n};\n\nconst globalActionFieldSelection = () => {\n  return {\n    success: true,\n    errors: ErrorsSelection,\n    result: true,\n  } as FieldSelection;\n};\n\nexport const globalActionOperation = (\n  operation: string,\n  variables: VariablesOptions,\n  namespace?: string | null,\n  options?: { live?: boolean }\n) => {\n  let fields: BuilderFieldSelection = {\n    [operation]: Call(variableOptionsToVariables(variables), globalActionFieldSelection()),\n  };\n\n  const dataPath = [operation];\n  if (namespace) {\n    fields = {\n      [namespace]: fields,\n    };\n    dataPath.unshift(namespace);\n  }\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: operation,\n    fields,\n    directives: directivesForOptions(options),\n  });\n};\n\nexport const graphqlizeBackgroundOptions = (options?: EnqueueBackgroundActionOptions<any> | null) => {\n  if (!options) return null;\n  const obj = { ...options };\n  if (typeof obj.retries == \"number\") {\n    obj.retries = {\n      retryCount: obj.retries,\n    };\n  }\n\n  if (typeof obj.queue == \"string\") {\n    obj.queue = {\n      name: obj.queue,\n    };\n  }\n  for (const key of Object.keys(obj)) {\n    if ([\"id\", \"retries\", \"queue\", \"priority\"].includes(key)) continue;\n    delete obj[key];\n  }\n\n  return obj;\n};\nexport const enqueueActionOperation = (\n  operation: string,\n  variables: VariablesOptions,\n  namespace?: string | null,\n  options?: EnqueueBackgroundActionOptions<any> | null\n) => {\n  let fields: BuilderFieldSelection = {\n    background: {\n      [operation]: Call(\n        {\n          ...variableOptionsToVariables(variables),\n          backgroundOptions: Var({\n            type: \"EnqueueBackgroundActionOptions\",\n            value: graphqlizeBackgroundOptions(options),\n          }),\n        },\n        {\n          success: true,\n          errors: {\n            message: true,\n            code: true,\n          },\n          backgroundAction: {\n            id: true,\n          },\n        }\n      ),\n    },\n  };\n\n  if (namespace) {\n    fields = {\n      [namespace]: fields,\n    };\n  }\n\n  return compileWithVariableValues({\n    type: \"mutation\",\n    name: \"enqueue\" + camelize(operation),\n    fields,\n  });\n};\n"]}