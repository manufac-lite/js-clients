{"version":3,"file":"ModelManager.js","sourceRoot":"","sources":["../../src/ModelManager.ts"],"names":[],"mappings":"","sourcesContent":["import type { GadgetConnection } from \"./GadgetConnection.js\";\nimport type { GadgetRecord } from \"./GadgetRecord.js\";\nimport type { GadgetRecordList } from \"./GadgetRecordList.js\";\n\nexport type AnyModelFinderMetadata = {\n  operationName: string;\n  modelApiIdentifier: string;\n  defaultSelection: Record<string, any>;\n  selectionType: any;\n  optionsType: any;\n  schemaType: any | null;\n};\n\n/**\n * Object representing one model's API in a high level way\n * This is a generic interface. Concrete ones are generated by Gadget, */\nexport interface AnyModelManager {\n  connection: GadgetConnection;\n  findOne: ((id: string, options: any) => Promise<GadgetRecord<any>>) & AnyModelFinderMetadata;\n  findMany: ((options: any) => Promise<GadgetRecordList<any>>) & AnyModelFinderMetadata;\n  findFirst: ((options: any) => Promise<GadgetRecord<any>>) & AnyModelFinderMetadata;\n  maybeFindFirst(options: any): Promise<GadgetRecord<any> | null>;\n  maybeFindOne(id: string, options: any): Promise<GadgetRecord<any> | null>;\n}\n"]}