import type { GadgetConnection } from "./GadgetConnection.js";
import type { GadgetRecord } from "./GadgetRecord.js";
import type { GadgetRecordList } from "./GadgetRecordList.js";
export type AnyModelFinderMetadata = {
    operationName: string;
    modelApiIdentifier: string;
    defaultSelection: Record<string, any>;
    selectionType: any;
    optionsType: any;
    schemaType: any | null;
};
/**
 * Object representing one model's API in a high level way
 * This is a generic interface. Concrete ones are generated by Gadget, */
export interface AnyModelManager {
    connection: GadgetConnection;
    findOne: ((id: string, options: any) => Promise<GadgetRecord<any>>) & AnyModelFinderMetadata;
    findMany: ((options: any) => Promise<GadgetRecordList<any>>) & AnyModelFinderMetadata;
    findFirst: ((options: any) => Promise<GadgetRecord<any>>) & AnyModelFinderMetadata;
    maybeFindFirst(options: any): Promise<GadgetRecord<any> | null>;
    maybeFindOne(id: string, options: any): Promise<GadgetRecord<any> | null>;
}
